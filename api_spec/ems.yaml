openapi: 3.0.0
info:
  title: Enquiry Management System API
  description: Spec for Enquiry Management System API
  version: 1.0.0
servers:
  - url: /api/v1.0

paths:
  /queries:
    get:
      summary: Returns all queries
      operationId: getQueries
      parameters:
        - name: offset
          in: query
          required: false
          description: The record index to start returning (e.g. 1 = second record)
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: The number of records to return
          schema:
            type: integer
        - name: title
          in: query
          required: false
          description: A search string to filter on title
          schema:
            type: string
        - name: folder
          in: query
          required: false
          description: A folder code to filter on
          schema:
            type: string
        - name: label
          in: query
          required: false
          description: A label id to filter on
          schema:
            type: integer
      responses:
        '200':
          description: An array of query objects
          content:
            application/json:
              schema:
                $ref: 'schemas/queries.yaml'
        '500':
          description: Server error
    post:
      summary: Create a new query
      operationId: createQuery
      requestBody:
        $ref: '#/components/requestBodies/QueryBody'
      responses:
        '201':
          description: The created query object
          content:
            application/json:
              schema:
                $ref: 'schemas/queryresponse.yaml'
        '404':
          description: Query not found
        '500':
          description: Server error
    put:
      summary: Update queries in bulk
      operationId: updateQueryBulk
      requestBody:
        $ref: '#/components/requestBodies/QueriesBody'
      responses:
        '200':
          description: An array of updated query objects
          content:
            application/json:
              schema:
                $ref: 'schemas/queries.yaml'
        '500':
          description: Server error
  /queries/{id}:
    get:
      summary: Returns specific query
      operationId: getQueryById
      parameters:
        - name: id
          in: path
          description: Query ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single query object
          content:
            application/json:
              schema:
                $ref: 'schemas/queryresponse.yaml'
        '404':
          description: Query not found
        '500':
          description: Server error
    put:
      summary: Update an existing query
      operationId: updateQuery
      parameters:
        - name: id
          in: path
          description: Query ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/QueryBody'
      responses:
        '200':
          description: The updated query object
          content:
            application/json:
              schema:
                $ref: 'schemas/queryresponse.yaml'
        '404':
          description: Query not found
        '500':
          description: Server error
    delete:
      summary: Delete a query
      operationId: deleteQuery
      parameters:
        - name: id
          in: path
          description: Query ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Query not found
        '500':
          description: Server error
  /messages:
    get:
      summary: Returns all messages
      operationId: getMessages
      parameters:
        - name: query_id
          in: query
          required: false
          description: Query filter - only return messages for this query
          schema:
            type: integer
        - name: offset
          in: query
          required: false
          description: The record index to start returning (e.g. 1 = second record)
          schema:
            type: integer
        - name: limit
          in: query
          required: false
          description: The number of records to return
          schema:
            type: integer
      responses:
        '200':
          description: An array of message objects
          content:
            application/json:
              schema:
                $ref: 'schemas/messages.yaml'
        '500':
          description: Server error
    post:
      summary: Create a new message
      operationId: createMessage
      requestBody:
        $ref: '#/components/requestBodies/MessageBody'
      responses:
        '201':
          description: The created message object
          content:
            application/json:
              schema:
                $ref: 'schemas/message.yaml'
        '404':
          description: Message not found
        '500':
          description: Server error
  /messages/{id}:
    put:
      summary: Update an existing message
      operationId: updateMessage
      parameters:
        - name: id
          in: path
          description: Message ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/MessageBody'
      responses:
        '200':
          description: The updated message object
          content:
            application/json:
              schema:
                $ref: 'schemas/message.yaml'
        '404':
          description: Message not found
        '500':
          description: Server error
    delete:
      summary: Delete a message
      operationId: deleteMessage
      parameters:
        - name: id
          in: path
          description: Message ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Message not found
        '500':
          description: Server error
  /folders:
    get:
      summary: Returns all folders
      operationId: getFolders
      responses:
        '200':
          description: An array of folder objects
          content:
            application/json:
              schema:
                $ref: 'schemas/folders.yaml'
        '500':
          description: Server error
    post:
      summary: Create a new folder
      operationId: createFolder
      requestBody:
        $ref: '#/components/requestBodies/FolderBody'
      responses:
        '201':
          description: The created folder object
          content:
            application/json:
              schema:
                $ref: 'schemas/folder.yaml'
        '404':
          description: Folder not found
        '500':
          description: Server error
  /folders/{id}:
    put:
      summary: Update an existing folder
      operationId: updateFolder
      parameters:
        - name: id
          in: path
          description: Folder ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/FolderBody'
      responses:
        '200':
          description: The updated folder object
          content:
            application/json:
              schema:
                $ref: 'schemas/folder.yaml'
        '404':
          description: Folder not found
        '500':
          description: Server error
    delete:
      summary: Delete a folder
      operationId: deleteFolder
      parameters:
        - name: id
          in: path
          description: Folder ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Folder not found
        '500':
          description: Server error
  /labels:
    get:
      summary: Returns all labels
      operationId: getLabels
      responses:
        '200':
          description: An array of label objects
          content:
            application/json:
              schema:
                $ref: 'schemas/labels.yaml'
        '500':
          description: Server error
    post:
      summary: Create a new label
      operationId: createLabel
      requestBody:
        $ref: '#/components/requestBodies/LabelBody'
      responses:
        '201':
          description: The created label object
          content:
            application/json:
              schema:
                $ref: 'schemas/label.yaml'
        '404':
          description: Label not found
        '500':
          description: Server error
  /labels/{id}:
    put:
      summary: Update an existing labels
      operationId: updateLabel
      parameters:
        - name: id
          in: path
          description: Label ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/LabelBody'
      responses:
        '200':
          description: The updated label object
          content:
            application/json:
              schema:
                $ref: 'schemas/label.yaml'
        '404':
          description: Label not found
        '500':
          description: Server error
    delete:
      summary: Delete a label
      operationId: deleteLabel
      parameters:
        - name: id
          in: path
          description: Label ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Label not found
        '500':
          description: Server error
  /queries/{query_id}/label/{label_id}:
    post:
      summary: Create a new querylabel relationship
      operationId: createQueryLabel
      parameters:
        - name: query_id
          in: path
          description: Query ID
          required: true
          schema:
            type: string
        - name: label_id
          in: path
          description: Label ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The updated query object
          content:
            application/json:
              schema:
                $ref: 'schemas/queryresponses.yaml'
        '500':
          description: Server error
    delete:
      summary: Delete a querylabel relationship
      operationId: deleteQueryLabel
      parameters:
        - name: query_id
          in: path
          description: Query ID
          required: true
          schema:
            type: string
        - name: label_id
          in: path
          description: Label ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The updated query object
          content:
            application/json:
              schema:
                $ref: 'schemas/queryresponses.yaml'
        '500':
          description: Server error
  /queries/{query_id}/user/{user_id}:
    post:
      summary: Create a new queryuser relationship
      operationId: createQueryUser
      parameters:
        - name: query_id
          in: path
          description: Query ID
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: The created queryuser object
          content:
            application/json:
              schema:
                $ref: 'schemas/queryuser.yaml'
        '500':
          description: Server error
    put:
      summary: Update a queryuser relationship
      operationId: updateQueryUser
      parameters:
        - name: query_id
          in: path
          description: Query ID
          required: true
          schema:
            type: integer
        - name: user_id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/QueryUserPutBody'
      responses:
        '200':
          description: Successful update
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Query / User combination not found
        '500':
          description: Server error
  /users:
    get:
      summary: Returns all users
      operationId: getUsers
      parameters:
        - name: user_ids
          in: query
          required: false
          description: An underscore delimited string of user IDs to apply as a filter
          schema:
            type: string
      responses:
        '200':
          description: An array of user objects
          content:
            application/json:
              schema:
                $ref: 'schemas/users.yaml'
        '500':
          description: Server error
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '201':
          description: The created user object
          content:
            application/json:
              schema:
                $ref: 'schemas/user.yaml'
        '404':
          description: User not found
        '500':
          description: Server error
  /users/{id}:
    get:
      summary: Returns specific user
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single user object
          content:
            application/json:
              schema:
                $ref: 'schemas/user.yaml'
        '404':
          description: User not found
        '500':
          description: Server error
    put:
      summary: Update an existing user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        '200':
          description: The updated user object
          content:
            application/json:
              schema:
                $ref: 'schemas/user.yaml'
        '404':
          description: User not found
        '500':
          description: Server error
    delete:
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successful deletion
          content:
            application/json:
              schema:
                type: object
        '404':
          description: Folder not found
        '500':
          description: Server error
  /activeuser:
    get:
      summary: Returns a user object for the user defined in the JWT
      operationId: getActiveUser
      responses:
        '200':
          description: A single user object
          content:
            application/json:
              schema:
                $ref: 'schemas/user.yaml'
        '401':
          description: Unauthorised
        '404':
          description: User not found
        '500':
          description: Server error
  /token:
    get:
      summary: Receives a refresh token and, if valid, returns a JWT and a new refresh token
      operationId: refreshToken
      responses:
        '200':
          description: An empty response containing a new JWT and refresh token
        '401':
          description: Refresh token not found
        '500':
          description: Server error
    delete:
      summary: Receives a refresh token and deletes it from the token cache
      operationId: deleteToken
      responses:
        '204':
          description: An empty success response
        '404':
          description: Refresh token not found
        '500':
          description: Server error
  /roles:
    get:
      summary: Returns all roles
      operationId: getRoles
      responses:
        '200':
          description: An array of roles objects
          content:
            application/json:
              schema:
                $ref: 'schemas/roles.yaml'
        '500':
          description: Server error
  /upload:
    post:
      summary: Upload one or more files
      operationId: uploadFiles
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                userfile:
                  type: string
                  format: binary
                userfiles[]:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: A message response
          content:
            application/json:
              schema:
                $ref: 'schemas/message.yaml'
        '500':
          description: Server error
  /authtypes:
    get:
      summary: Returns an array of available authentication types
      operationId: authTypes
      responses:
        '200':
          description: An array of auth types
          content:
            application/json:
              schema:
                $ref: 'schemas/authtypes.yaml'
        '500':
          description: Server error

components:
  requestBodies:
    QueryBody:
      description: A JSON object describing a query request
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/queryrequest.yaml'
    QueriesBody:
      description: An array of JSON objects describing query requests
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/queryrequests.yaml'
    MessageBody:
      description: A JSON object describing a message
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/message.yaml'
    FolderBody:
      description: A JSON object describing a folder
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/folder.yaml'
    LabelBody:
      description: A JSON object describing a label
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/label.yaml'
    QueryLabelBody:
      description: A JSON object describing a querylabel relationship
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/querylabel.yaml'
    QueryUserBody:
      description: A JSON object describing a queryuser relationship
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/queryuser.yaml'
    QueryUserPutBody:
      description: A JSON object containing a QueryUser request body
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/queryuserput.yaml'
    UserBody:
      description: A JSON object describing a user
      required: true
      content:
        application/json:
          schema:
            $ref: 'schemas/user.yaml'
